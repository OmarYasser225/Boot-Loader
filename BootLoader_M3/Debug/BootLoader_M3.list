
BootLoader_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002238  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002344  08002344  00003344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800237c  0800237c  00004040  2**0
                  CONTENTS
  4 .ARM          00000000  0800237c  0800237c  00004040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800237c  0800237c  00004040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800237c  0800237c  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002380  08002380  00003380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08002384  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000040  080023c4  00004040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080023c4  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cb5  00000000  00000000  00004069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001967  00000000  00000000  0000bd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000602  00000000  00000000  0000de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cbb  00000000  00000000  0000e452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094f3  00000000  00000000  0002510d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082170  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0770  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e44  00000000  00000000  000b07b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000b25f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	0800232c 	.word	0x0800232c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	0800232c 	.word	0x0800232c

0800014c <BL_u8CalculatePage>:

    return CRC_Statues;
}*/

static uint8_t BL_u8CalculatePage(uint32_t Copy_u32AddrPage)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	uint32_t Result = (Copy_u32AddrPage & 0x0000FFFF);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	b29b      	uxth	r3, r3
 8000158:	60fb      	str	r3, [r7, #12]
	Result /= PAGE_SIZE;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	0a9b      	lsrs	r3, r3, #10
 800015e:	60fb      	str	r3, [r7, #12]
	return Result;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	b2db      	uxtb	r3, r3
}
 8000164:	4618      	mov	r0, r3
 8000166:	3714      	adds	r7, #20
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
	...

08000170 <BL_u8VerifyCRC>:

static uint8_t BL_u8VerifyCRC(uint8_t *Copy_u8Data , uint8_t Copy_u8Length , uint32_t Copy_u8HostCRC)
{
 8000170:	b480      	push	{r7}
 8000172:	b089      	sub	sp, #36	@ 0x24
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	460b      	mov	r3, r1
 800017a:	607a      	str	r2, [r7, #4]
 800017c:	72fb      	strb	r3, [r7, #11]
	uint8_t CRC_Statues = CRC_NOT_VERIFIED;
 800017e:	2301      	movs	r3, #1
 8000180:	74fb      	strb	r3, [r7, #19]
	uint8_t CRC_TEMP = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	74bb      	strb	r3, [r7, #18]
	uint32_t CRC_Value = 0xFFFFFFFF;
 8000186:	f04f 33ff 	mov.w	r3, #4294967295
 800018a:	61fb      	str	r3, [r7, #28]

	    for(uint32_t i = 0 ; i < Copy_u8Length ; i++)
 800018c:	2300      	movs	r3, #0
 800018e:	61bb      	str	r3, [r7, #24]
 8000190:	e020      	b.n	80001d4 <BL_u8VerifyCRC+0x64>
	    {
	    	CRC_TEMP = Copy_u8Data[i];
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	69bb      	ldr	r3, [r7, #24]
 8000196:	4413      	add	r3, r2
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	74bb      	strb	r3, [r7, #18]

	        CRC_Value = CRC_Value ^ CRC_TEMP;
 800019c:	7cbb      	ldrb	r3, [r7, #18]
 800019e:	69fa      	ldr	r2, [r7, #28]
 80001a0:	4053      	eors	r3, r2
 80001a2:	61fb      	str	r3, [r7, #28]
	        for(uint32_t j = 0 ; j < 32 ; j++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e00e      	b.n	80001c8 <BL_u8VerifyCRC+0x58>
	        {
	            if(CRC_Value & 0x80000000)
 80001aa:	69fb      	ldr	r3, [r7, #28]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	da05      	bge.n	80001bc <BL_u8VerifyCRC+0x4c>
	            {
	                CRC_Value = (CRC_Value << 1) ^ 0x04C11DB7;
 80001b0:	69fb      	ldr	r3, [r7, #28]
 80001b2:	005a      	lsls	r2, r3, #1
 80001b4:	4b10      	ldr	r3, [pc, #64]	@ (80001f8 <BL_u8VerifyCRC+0x88>)
 80001b6:	4053      	eors	r3, r2
 80001b8:	61fb      	str	r3, [r7, #28]
 80001ba:	e002      	b.n	80001c2 <BL_u8VerifyCRC+0x52>
	            }
	            else
	            {
	                CRC_Value = (CRC_Value << 1);
 80001bc:	69fb      	ldr	r3, [r7, #28]
 80001be:	005b      	lsls	r3, r3, #1
 80001c0:	61fb      	str	r3, [r7, #28]
	        for(uint32_t j = 0 ; j < 32 ; j++)
 80001c2:	697b      	ldr	r3, [r7, #20]
 80001c4:	3301      	adds	r3, #1
 80001c6:	617b      	str	r3, [r7, #20]
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	2b1f      	cmp	r3, #31
 80001cc:	d9ed      	bls.n	80001aa <BL_u8VerifyCRC+0x3a>
	    for(uint32_t i = 0 ; i < Copy_u8Length ; i++)
 80001ce:	69bb      	ldr	r3, [r7, #24]
 80001d0:	3301      	adds	r3, #1
 80001d2:	61bb      	str	r3, [r7, #24]
 80001d4:	7afb      	ldrb	r3, [r7, #11]
 80001d6:	69ba      	ldr	r2, [r7, #24]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d3da      	bcc.n	8000192 <BL_u8VerifyCRC+0x22>
	        }
	    }

	    CRC_Value &= 0xFFFFFFFF;

	    CRC_Statues = (CRC_Value == Copy_u8HostCRC)? CRC_VERIFIED : CRC_NOT_VERIFIED ;
 80001dc:	69fa      	ldr	r2, [r7, #28]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	bf14      	ite	ne
 80001e4:	2301      	movne	r3, #1
 80001e6:	2300      	moveq	r3, #0
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	74fb      	strb	r3, [r7, #19]

	    return CRC_Statues;
 80001ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3724      	adds	r7, #36	@ 0x24
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	04c11db7 	.word	0x04c11db7

080001fc <BL_MemoryVerfiy>:

static MemoryValidation_Ret_t BL_MemoryVerfiy(uint32_t  Copy_pu32MemoryAdd)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	MemoryValidation_Ret_t  Local_RetValue = MEM_INVALID ;
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]

	if(Copy_pu32MemoryAdd >= FLASH_BASE  && Copy_pu32MemoryAdd <= FLASH_BANK1_END)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800020e:	d306      	bcc.n	800021e <BL_MemoryVerfiy+0x22>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a10      	ldr	r2, [pc, #64]	@ (8000254 <BL_MemoryVerfiy+0x58>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d802      	bhi.n	800021e <BL_MemoryVerfiy+0x22>
	{
		Local_RetValue = MEM_FLASH_VALID;
 8000218:	2301      	movs	r3, #1
 800021a:	73fb      	strb	r3, [r7, #15]
 800021c:	e014      	b.n	8000248 <BL_MemoryVerfiy+0x4c>
	}
	else if (Copy_pu32MemoryAdd >= SRAM_BASE && Copy_pu32MemoryAdd <= (SRAM_BASE + SRAM_SIZE ))
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000224:	d306      	bcc.n	8000234 <BL_MemoryVerfiy+0x38>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a0b      	ldr	r2, [pc, #44]	@ (8000258 <BL_MemoryVerfiy+0x5c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d802      	bhi.n	8000234 <BL_MemoryVerfiy+0x38>
	{
		Local_RetValue = MEM_SRAM_VALID;
 800022e:	2302      	movs	r3, #2
 8000230:	73fb      	strb	r3, [r7, #15]
 8000232:	e009      	b.n	8000248 <BL_MemoryVerfiy+0x4c>
	}
	else if (Copy_pu32MemoryAdd >= SYSMEM_BASE   && Copy_pu32MemoryAdd <= SYSMEM_END  )
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4a09      	ldr	r2, [pc, #36]	@ (800025c <BL_MemoryVerfiy+0x60>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d905      	bls.n	8000248 <BL_MemoryVerfiy+0x4c>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a08      	ldr	r2, [pc, #32]	@ (8000260 <BL_MemoryVerfiy+0x64>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d801      	bhi.n	8000248 <BL_MemoryVerfiy+0x4c>
	{
		Local_RetValue = MEM_SYS_VALID;
 8000244:	2303      	movs	r3, #3
 8000246:	73fb      	strb	r3, [r7, #15]
	}

	return Local_RetValue;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	0801ffff 	.word	0x0801ffff
 8000258:	20010000 	.word	0x20010000
 800025c:	1fffefff 	.word	0x1fffefff
 8000260:	1ffff7ff 	.word	0x1ffff7ff

08000264 <BL_FLASHErase>:

static HAL_StatusTypeDef BL_FLASHErase(uint8_t Copy_u8PageNum , uint8_t Copy_u8NumOfPage)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	460a      	mov	r2, r1
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	4613      	mov	r3, r2
 8000272:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8MaxNumPages = (uint8_t)(NUM_OF_PAGES - Copy_u8PageNum) ;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800027a:	77bb      	strb	r3, [r7, #30]
	HAL_StatusTypeDef Local_FlashRet = HAL_OK;
 800027c:	2300      	movs	r3, #0
 800027e:	77fb      	strb	r3, [r7, #31]

	// Check on the Page Number and Number of Pages
	if( ((Copy_u8PageNum > NUM_OF_PAGES) || (Copy_u8NumOfPage > Local_u8MaxNumPages ) )   &&   (Copy_u8PageNum != MASS_ERASE_CMD))
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db03      	blt.n	8000290 <BL_FLASHErase+0x2c>
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	7fbb      	ldrb	r3, [r7, #30]
 800028c:	429a      	cmp	r2, r3
 800028e:	d905      	bls.n	800029c <BL_FLASHErase+0x38>
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	2bff      	cmp	r3, #255	@ 0xff
 8000294:	d002      	beq.n	800029c <BL_FLASHErase+0x38>
	{
		Local_FlashRet = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	77fb      	strb	r3, [r7, #31]
 800029a:	e033      	b.n	8000304 <BL_FLASHErase+0xa0>
		// Erase Parameters
		FLASH_EraseInitTypeDef pEraseInit ;
		uint32_t PageError;

		// Check on Mass Erase
		if(Copy_u8PageNum == MASS_ERASE_CMD)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	2bff      	cmp	r3, #255	@ 0xff
 80002a0:	d109      	bne.n	80002b6 <BL_FLASHErase+0x52>
		{
			pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80002a2:	2302      	movs	r3, #2
 80002a4:	60fb      	str	r3, [r7, #12]
			pEraseInit.Banks = FLASH_BANK_1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
			pEraseInit.PageAddress = PAGE_BASE_ADDR;
 80002aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80002ae:	617b      	str	r3, [r7, #20]
			pEraseInit.NbPages = Local_u8MaxNumPages;
 80002b0:	7fbb      	ldrb	r3, [r7, #30]
 80002b2:	61bb      	str	r3, [r7, #24]
 80002b4:	e00f      	b.n	80002d6 <BL_FLASHErase+0x72>

		}
		else
		{
			pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]

			// Choose Number of Banks  --> This option is not support in  STM32F103C8T6 so it is considered as 1 Bank
			pEraseInit.Banks = FLASH_BANK_1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	613b      	str	r3, [r7, #16]

			// Enter the Page Address
			pEraseInit.PageAddress = PAGE_BASE_ADDR + ((uint32_t)Copy_u8PageNum * PAGE_SIZE);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80002c4:	029b      	lsls	r3, r3, #10
 80002c6:	617b      	str	r3, [r7, #20]

			// Number of Pages
			pEraseInit.NbPages = (Copy_u8NumOfPage > Local_u8MaxNumPages)? Local_u8MaxNumPages: Copy_u8NumOfPage ;
 80002c8:	79ba      	ldrb	r2, [r7, #6]
 80002ca:	7fbb      	ldrb	r3, [r7, #30]
 80002cc:	4293      	cmp	r3, r2
 80002ce:	bf28      	it	cs
 80002d0:	4613      	movcs	r3, r2
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	61bb      	str	r3, [r7, #24]
		}

			// Unlock Flash
			if(HAL_FLASH_Unlock() == HAL_OK)
 80002d6:	f000 fe1d 	bl	8000f14 <HAL_FLASH_Unlock>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d108      	bne.n	80002f2 <BL_FLASHErase+0x8e>
			{
				// Call the Fuction
				HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80002e0:	f107 0208 	add.w	r2, r7, #8
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4611      	mov	r1, r2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fefa 	bl	80010e4 <HAL_FLASHEx_Erase>
 80002f0:	e001      	b.n	80002f6 <BL_FLASHErase+0x92>

			}
			else
			{
				Local_FlashRet = HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	77fb      	strb	r3, [r7, #31]
			}


			// Lock Flash
			if(HAL_FLASH_Lock()== HAL_OK)
 80002f6:	f000 fe33 	bl	8000f60 <HAL_FLASH_Lock>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <BL_FLASHErase+0xa0>
			{
				// Nothing
			}
			else
			{
				Local_FlashRet = HAL_ERROR;
 8000300:	2301      	movs	r3, #1
 8000302:	77fb      	strb	r3, [r7, #31]
			}


	}

	return Local_FlashRet;
 8000304:	7ffb      	ldrb	r3, [r7, #31]
}
 8000306:	4618      	mov	r0, r3
 8000308:	3720      	adds	r7, #32
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <BL_FLASHWrite>:


static HAL_StatusTypeDef BL_FLASHWrite(uint32_t Copy_u32StatingAdd , uint32_t * Copy_u16Payload , uint8_t Copy_u8PayLoadLen)
{
 8000310:	b5b0      	push	{r4, r5, r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	4613      	mov	r3, r2
 800031c:	71fb      	strb	r3, [r7, #7]


	// Define the Return Variable
	HAL_StatusTypeDef Local_Ret = HAL_OK;
 800031e:	2300      	movs	r3, #0
 8000320:	75fb      	strb	r3, [r7, #23]

	// Check the flash  address
	if(Copy_u32StatingAdd >= FLASH_BASE  && Copy_u32StatingAdd <= FLASH_BANK1_END)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000328:	d327      	bcc.n	800037a <BL_FLASHWrite+0x6a>
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	4a16      	ldr	r2, [pc, #88]	@ (8000388 <BL_FLASHWrite+0x78>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d823      	bhi.n	800037a <BL_FLASHWrite+0x6a>
	{
		// Define the loop iterator
		uint8_t Local_u8Iterator ;
		uint8_t NumHalfWord = (Copy_u8PayLoadLen / 4)  ;
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	089b      	lsrs	r3, r3, #2
 8000336:	757b      	strb	r3, [r7, #21]

		// Unlock Flash
		HAL_FLASH_Unlock();
 8000338:	f000 fdec 	bl	8000f14 <HAL_FLASH_Unlock>

		// Write the data to flash
		for(Local_u8Iterator = 0 ; Local_u8Iterator < NumHalfWord ; Local_u8Iterator++ )
 800033c:	2300      	movs	r3, #0
 800033e:	75bb      	strb	r3, [r7, #22]
 8000340:	e014      	b.n	800036c <BL_FLASHWrite+0x5c>
		{

			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD , (Copy_u32StatingAdd+(Local_u8Iterator*4)) ,  Copy_u16Payload[Local_u8Iterator] );
 8000342:	7dbb      	ldrb	r3, [r7, #22]
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	461a      	mov	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	18d1      	adds	r1, r2, r3
 800034c:	7dbb      	ldrb	r3, [r7, #22]
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	4413      	add	r3, r2
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2200      	movs	r2, #0
 8000358:	461c      	mov	r4, r3
 800035a:	4615      	mov	r5, r2
 800035c:	4622      	mov	r2, r4
 800035e:	462b      	mov	r3, r5
 8000360:	2002      	movs	r0, #2
 8000362:	f000 fd67 	bl	8000e34 <HAL_FLASH_Program>
		for(Local_u8Iterator = 0 ; Local_u8Iterator < NumHalfWord ; Local_u8Iterator++ )
 8000366:	7dbb      	ldrb	r3, [r7, #22]
 8000368:	3301      	adds	r3, #1
 800036a:	75bb      	strb	r3, [r7, #22]
 800036c:	7dba      	ldrb	r2, [r7, #22]
 800036e:	7d7b      	ldrb	r3, [r7, #21]
 8000370:	429a      	cmp	r2, r3
 8000372:	d3e6      	bcc.n	8000342 <BL_FLASHWrite+0x32>

		}

		// Lock Flash
		HAL_FLASH_Lock();
 8000374:	f000 fdf4 	bl	8000f60 <HAL_FLASH_Lock>
	{
 8000378:	e001      	b.n	800037e <BL_FLASHWrite+0x6e>
	}
	else
	{
		Local_Ret = HAL_ERROR;
 800037a:	2301      	movs	r3, #1
 800037c:	75fb      	strb	r3, [r7, #23]
	}

	return Local_Ret;
 800037e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000380:	4618      	mov	r0, r3
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bdb0      	pop	{r4, r5, r7, pc}
 8000388:	0801ffff 	.word	0x0801ffff

0800038c <BL_VoidSendAck>:




static void BL_VoidSendAck(uint8_t Copy_u8ReplyLength)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
    uint8_t local_u8Buffer[2] = {BL_ACK, Copy_u8ReplyLength};
 8000396:	23a5      	movs	r3, #165	@ 0xa5
 8000398:	733b      	strb	r3, [r7, #12]
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	737b      	strb	r3, [r7, #13]

    HAL_UART_Transmit(&huart1, local_u8Buffer, 2, HAL_MAX_DELAY);
 800039e:	f107 010c 	add.w	r1, r7, #12
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
 80003a6:	2202      	movs	r2, #2
 80003a8:	4803      	ldr	r0, [pc, #12]	@ (80003b8 <BL_VoidSendAck+0x2c>)
 80003aa:	f001 fd27 	bl	8001dfc <HAL_UART_Transmit>
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000060 	.word	0x20000060

080003bc <BL_VoidSendNack>:

static void BL_VoidSendNack(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
    uint8_t local_u8Buffer = BL_NACK;
 80003c2:	237f      	movs	r3, #127	@ 0x7f
 80003c4:	71fb      	strb	r3, [r7, #7]

    HAL_UART_Transmit(&huart1, &local_u8Buffer , 1, HAL_MAX_DELAY);
 80003c6:	1df9      	adds	r1, r7, #7
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	2201      	movs	r2, #1
 80003ce:	4803      	ldr	r0, [pc, #12]	@ (80003dc <BL_VoidSendNack+0x20>)
 80003d0:	f001 fd14 	bl	8001dfc <HAL_UART_Transmit>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000060 	.word	0x20000060

080003e0 <BL_VoidHandleGetVerCmd>:

/************************** Function Implementation **************************/
void BL_VoidHandleGetVerCmd(uint8_t *Copy_u8buffer)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
      /********************************/
     /* Length *  Command  *  CRC    */
    /********************************/

    // Local variables
    uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	75fb      	strb	r3, [r7, #23]
    uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 80003f0:	7dfb      	ldrb	r3, [r7, #23]
 80003f2:	3b04      	subs	r3, #4
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	613b      	str	r3, [r7, #16]
    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3b04      	subs	r3, #4
 8000400:	b2db      	uxtb	r3, r3
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	4619      	mov	r1, r3
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff feb2 	bl	8000170 <BL_u8VerifyCRC>
 800040c:	4603      	mov	r3, r0
 800040e:	73fb      	strb	r3, [r7, #15]

    // Check the CRC
    if(local_u8CRCStatues == CRC_VERIFIED)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d10d      	bne.n	8000432 <BL_VoidHandleGetVerCmd+0x52>
    {
        // Send Ack
        BL_VoidSendAck(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff ffb8 	bl	800038c <BL_VoidSendAck>

        // Send the Bootloader Version
        uint8_t local_u8BLVersion = BL_VERSION;
 800041c:	2301      	movs	r3, #1
 800041e:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1, &local_u8BLVersion, 1, HAL_MAX_DELAY);
 8000420:	f107 010e 	add.w	r1, r7, #14
 8000424:	f04f 33ff 	mov.w	r3, #4294967295
 8000428:	2201      	movs	r2, #1
 800042a:	4805      	ldr	r0, [pc, #20]	@ (8000440 <BL_VoidHandleGetVerCmd+0x60>)
 800042c:	f001 fce6 	bl	8001dfc <HAL_UART_Transmit>
    else
    {
        // Send Nack
        BL_VoidSendNack();
    }
}
 8000430:	e001      	b.n	8000436 <BL_VoidHandleGetVerCmd+0x56>
        BL_VoidSendNack();
 8000432:	f7ff ffc3 	bl	80003bc <BL_VoidSendNack>
}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000060 	.word	0x20000060

08000444 <BL_VoidHandleGetHelpCmd>:

void BL_VoidHandleGetHelpCmd(uint8_t *Copy_u8buffer)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

		uint8_t local_pu8SupportedCMD[] =
 800044c:	4a17      	ldr	r2, [pc, #92]	@ (80004ac <BL_VoidHandleGetHelpCmd+0x68>)
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	ca07      	ldmia	r2, {r0, r1, r2}
 8000454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				0x5B,
				0x5C

		};

	    uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	77fb      	strb	r3, [r7, #31]
	    uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 8000460:	7ffb      	ldrb	r3, [r7, #31]
 8000462:	3b04      	subs	r3, #4
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	61bb      	str	r3, [r7, #24]
	    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 800046c:	7ffb      	ldrb	r3, [r7, #31]
 800046e:	3b04      	subs	r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	69ba      	ldr	r2, [r7, #24]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff fe7a 	bl	8000170 <BL_u8VerifyCRC>
 800047c:	4603      	mov	r3, r0
 800047e:	75fb      	strb	r3, [r7, #23]

	    // Check the CRC
	    if(local_u8CRCStatues == CRC_VERIFIED)
 8000480:	7dfb      	ldrb	r3, [r7, #23]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10b      	bne.n	800049e <BL_VoidHandleGetHelpCmd+0x5a>
	    {
	        // Send Ack
	        BL_VoidSendAck(sizeof(local_pu8SupportedCMD));
 8000486:	200c      	movs	r0, #12
 8000488:	f7ff ff80 	bl	800038c <BL_VoidSendAck>

	        // Send the Bootloader Cmd
	        HAL_UART_Transmit(&huart1, local_pu8SupportedCMD, sizeof(local_pu8SupportedCMD), HAL_MAX_DELAY);
 800048c:	f107 0108 	add.w	r1, r7, #8
 8000490:	f04f 33ff 	mov.w	r3, #4294967295
 8000494:	220c      	movs	r2, #12
 8000496:	4806      	ldr	r0, [pc, #24]	@ (80004b0 <BL_VoidHandleGetHelpCmd+0x6c>)
 8000498:	f001 fcb0 	bl	8001dfc <HAL_UART_Transmit>
	    {
	        // Send Nack
	        BL_VoidSendNack();
	    }

}
 800049c:	e001      	b.n	80004a2 <BL_VoidHandleGetHelpCmd+0x5e>
	        BL_VoidSendNack();
 800049e:	f7ff ff8d 	bl	80003bc <BL_VoidSendNack>
}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	08002344 	.word	0x08002344
 80004b0:	20000060 	.word	0x20000060

080004b4 <BL_VoidHandleGetCIDCmd>:

void BL_VoidHandleGetCIDCmd(uint8_t *Copy_u8buffer)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	    uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	75fb      	strb	r3, [r7, #23]
	    uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 80004c4:	7dfb      	ldrb	r3, [r7, #23]
 80004c6:	3b04      	subs	r3, #4
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	613b      	str	r3, [r7, #16]
	    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 80004d0:	7dfb      	ldrb	r3, [r7, #23]
 80004d2:	3b04      	subs	r3, #4
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4619      	mov	r1, r3
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff fe48 	bl	8000170 <BL_u8VerifyCRC>
 80004e0:	4603      	mov	r3, r0
 80004e2:	73fb      	strb	r3, [r7, #15]

	    // Check the CRC
	    if(local_u8CRCStatues == CRC_VERIFIED)
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d112      	bne.n	8000510 <BL_VoidHandleGetCIDCmd+0x5c>
	    {

	    	uint16_t local_u16DeviceId =  (uint16_t)(CHIP_ID & 0x0FFF);
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <BL_VoidHandleGetCIDCmd+0x68>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	81bb      	strh	r3, [r7, #12]
	        // Send Ack
	        BL_VoidSendAck(sizeof(local_u16DeviceId));
 80004f8:	2002      	movs	r0, #2
 80004fa:	f7ff ff47 	bl	800038c <BL_VoidSendAck>

	        // Send the Device ID
	        HAL_UART_Transmit(&huart1, &local_u16DeviceId, sizeof(local_u16DeviceId), HAL_MAX_DELAY);
 80004fe:	f107 010c 	add.w	r1, r7, #12
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	2202      	movs	r2, #2
 8000508:	4805      	ldr	r0, [pc, #20]	@ (8000520 <BL_VoidHandleGetCIDCmd+0x6c>)
 800050a:	f001 fc77 	bl	8001dfc <HAL_UART_Transmit>
	    {
	        // Send Nack
	        BL_VoidSendNack();
	    }

}
 800050e:	e001      	b.n	8000514 <BL_VoidHandleGetCIDCmd+0x60>
	        BL_VoidSendNack();
 8000510:	f7ff ff54 	bl	80003bc <BL_VoidSendNack>
}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e0042000 	.word	0xe0042000
 8000520:	20000060 	.word	0x20000060

08000524 <BL_VoidHandleGetRDPStatusCmd>:

void BL_VoidHandleGetRDPStatusCmd(uint8_t *Copy_u8buffer)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

		    uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	75fb      	strb	r3, [r7, #23]
		    uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 8000534:	7dfb      	ldrb	r3, [r7, #23]
 8000536:	3b04      	subs	r3, #4
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	613b      	str	r3, [r7, #16]
		    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 8000540:	7dfb      	ldrb	r3, [r7, #23]
 8000542:	3b04      	subs	r3, #4
 8000544:	b2db      	uxtb	r3, r3
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	4619      	mov	r1, r3
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff fe10 	bl	8000170 <BL_u8VerifyCRC>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]

		    // Check the CRC
		    if(local_u8CRCStatues == CRC_VERIFIED)
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d110      	bne.n	800057c <BL_VoidHandleGetRDPStatusCmd+0x58>
		    {

		    	uint8_t local_u8RDPStatus =  (uint8_t)((RDP >> 8) & 0xFF);
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <BL_VoidHandleGetRDPStatusCmd+0x64>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
		        // Send Ack
		        BL_VoidSendAck(sizeof(local_u8RDPStatus));
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ff11 	bl	800038c <BL_VoidSendAck>

		        // Send the Device ID
		        HAL_UART_Transmit(&huart1, &local_u8RDPStatus, sizeof(local_u8RDPStatus), HAL_MAX_DELAY);
 800056a:	f107 010e 	add.w	r1, r7, #14
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	2201      	movs	r2, #1
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <BL_VoidHandleGetRDPStatusCmd+0x68>)
 8000576:	f001 fc41 	bl	8001dfc <HAL_UART_Transmit>
		        // Send Nack
		        BL_VoidSendNack();
		    }


}
 800057a:	e001      	b.n	8000580 <BL_VoidHandleGetRDPStatusCmd+0x5c>
		        BL_VoidSendNack();
 800057c:	f7ff ff1e 	bl	80003bc <BL_VoidSendNack>
}
 8000580:	bf00      	nop
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	1ffff800 	.word	0x1ffff800
 800058c:	20000060 	.word	0x20000060

08000590 <BL_VoidHandleGoToAddrCmd>:

void BL_VoidHandleGoToAddrCmd(uint8_t *Copy_u8buffer)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	 	 	 	uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	77fb      	strb	r3, [r7, #31]
	 	 	 	uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 80005a0:	7ffb      	ldrb	r3, [r7, #31]
 80005a2:	3b04      	subs	r3, #4
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	61bb      	str	r3, [r7, #24]
			    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 80005ac:	7ffb      	ldrb	r3, [r7, #31]
 80005ae:	3b04      	subs	r3, #4
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	69ba      	ldr	r2, [r7, #24]
 80005b4:	4619      	mov	r1, r3
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff fdda 	bl	8000170 <BL_u8VerifyCRC>
 80005bc:	4603      	mov	r3, r0
 80005be:	75fb      	strb	r3, [r7, #23]

			    // Check the CRC
			    if(local_u8CRCStatues == CRC_VERIFIED)
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d12b      	bne.n	800061e <BL_VoidHandleGoToAddrCmd+0x8e>
			    {

			    	  uint32_t  Local_u32ADDR = *((uint32_t *)(Copy_u8buffer + 2));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80005cc:	613b      	str	r3, [r7, #16]
			    	  MemoryValidation_Ret_t Local_MemCheck = BL_MemoryVerfiy(Local_u32ADDR) ;
 80005ce:	6938      	ldr	r0, [r7, #16]
 80005d0:	f7ff fe14 	bl	80001fc <BL_MemoryVerfiy>
 80005d4:	4603      	mov	r3, r0
 80005d6:	72fb      	strb	r3, [r7, #11]
			    	  // Check Memory Validation
			    	  if(Local_MemCheck == MEM_INVALID)
 80005d8:	7afb      	ldrb	r3, [r7, #11]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10b      	bne.n	80005f6 <BL_VoidHandleGoToAddrCmd+0x66>
			    	   {
			    		       // Send Ack
			    		  	   BL_VoidSendAck(sizeof(Local_MemCheck));
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff fed4 	bl	800038c <BL_VoidSendAck>

			    		  	   // Send the Memory Status
			    		  	   HAL_UART_Transmit(&huart1, &Local_MemCheck, sizeof(Local_MemCheck), HAL_MAX_DELAY);
 80005e4:	f107 010b 	add.w	r1, r7, #11
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2201      	movs	r2, #1
 80005ee:	480f      	ldr	r0, [pc, #60]	@ (800062c <BL_VoidHandleGoToAddrCmd+0x9c>)
 80005f0:	f001 fc04 	bl	8001dfc <HAL_UART_Transmit>
			    {
			        // Send Nack
			        BL_VoidSendNack();
			    }

}
 80005f4:	e015      	b.n	8000622 <BL_VoidHandleGoToAddrCmd+0x92>
			    		  	     BL_VoidSendAck(sizeof(Local_MemCheck));
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fec8 	bl	800038c <BL_VoidSendAck>
			    		  	     HAL_UART_Transmit(&huart1, &Local_MemCheck, sizeof(Local_MemCheck), HAL_MAX_DELAY);
 80005fc:	f107 010b 	add.w	r1, r7, #11
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4809      	ldr	r0, [pc, #36]	@ (800062c <BL_VoidHandleGoToAddrCmd+0x9c>)
 8000608:	f001 fbf8 	bl	8001dfc <HAL_UART_Transmit>
			    		  	     Local_u32ADDR |= 0x0001;  // To making T-Bit = 1 --> refer to bit[0];
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	613b      	str	r3, [r7, #16]
			    		  	     Local_PTF = (void *)  Local_u32ADDR;
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	60fb      	str	r3, [r7, #12]
			    		  	     Local_PTF();
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4798      	blx	r3
}
 800061c:	e001      	b.n	8000622 <BL_VoidHandleGoToAddrCmd+0x92>
			        BL_VoidSendNack();
 800061e:	f7ff fecd 	bl	80003bc <BL_VoidSendNack>
}
 8000622:	bf00      	nop
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000060 	.word	0x20000060

08000630 <BL_VoidHandleFlashEraseCmd>:

void BL_VoidHandleFlashEraseCmd(uint8_t *Copy_u8buffer)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	            uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	75fb      	strb	r3, [r7, #23]
			    uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3b04      	subs	r3, #4
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	613b      	str	r3, [r7, #16]
			    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	3b04      	subs	r3, #4
 8000650:	b2db      	uxtb	r3, r3
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	4619      	mov	r1, r3
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff fd8a 	bl	8000170 <BL_u8VerifyCRC>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]

			    // Check the CRC
			    if(local_u8CRCStatues == CRC_VERIFIED)
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d117      	bne.n	8000696 <BL_VoidHandleFlashEraseCmd+0x66>
			    	HAL_StatusTypeDef Local_FlashRet;



			    	// Call the Erase Function
			    	Local_FlashRet = BL_FLASHErase(Copy_u8buffer[PAGENUM], Copy_u8buffer[NUMPAGES]);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3302      	adds	r3, #2
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3303      	adds	r3, #3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	4610      	mov	r0, r2
 8000676:	f7ff fdf5 	bl	8000264 <BL_FLASHErase>
 800067a:	4603      	mov	r3, r0
 800067c:	73bb      	strb	r3, [r7, #14]



			    	// Send ACK
			    	BL_VoidSendAck(sizeof(Local_FlashRet));
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fe84 	bl	800038c <BL_VoidSendAck>


			    	// Send Reply
	    		  	   HAL_UART_Transmit(&huart1, &Local_FlashRet , sizeof(Local_FlashRet), HAL_MAX_DELAY);
 8000684:	f107 010e 	add.w	r1, r7, #14
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	2201      	movs	r2, #1
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <BL_VoidHandleFlashEraseCmd+0x74>)
 8000690:	f001 fbb4 	bl	8001dfc <HAL_UART_Transmit>
			        // Send Nack
			        BL_VoidSendNack();
			    }


}
 8000694:	e001      	b.n	800069a <BL_VoidHandleFlashEraseCmd+0x6a>
			        BL_VoidSendNack();
 8000696:	f7ff fe91 	bl	80003bc <BL_VoidSendNack>
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000060 	.word	0x20000060

080006a8 <BL_VoidHandleMemWriteCmd>:

void BL_VoidHandleMemWriteCmd(uint8_t *Copy_u8buffer)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

					uint8_t local_u8CmdLen = Copy_u8buffer[0]+1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	77fb      	strb	r3, [r7, #31]
				    uint32_t local_u32HostCRC = *((uint32_t *)(Copy_u8buffer + local_u8CmdLen - 4));
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	3b04      	subs	r3, #4
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	61bb      	str	r3, [r7, #24]
				    uint8_t local_u8CRCStatues = BL_u8VerifyCRC(Copy_u8buffer , (local_u8CmdLen - 4) , local_u32HostCRC);
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	69ba      	ldr	r2, [r7, #24]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fd4e 	bl	8000170 <BL_u8VerifyCRC>
 80006d4:	4603      	mov	r3, r0
 80006d6:	75fb      	strb	r3, [r7, #23]

				    // Check the CRC
				    if(local_u8CRCStatues == CRC_VERIFIED)
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d148      	bne.n	8000770 <BL_VoidHandleMemWriteCmd+0xc8>
				    {

				    	uint32_t  Local_u32ADDR = *((uint32_t *)(Copy_u8buffer + 2));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006e4:	613b      	str	r3, [r7, #16]
				    	MemoryValidation_Ret_t Local_MemCheck = BL_MemoryVerfiy(Local_u32ADDR);
 80006e6:	6938      	ldr	r0, [r7, #16]
 80006e8:	f7ff fd88 	bl	80001fc <BL_MemoryVerfiy>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73bb      	strb	r3, [r7, #14]

						if(Local_MemCheck ==  MEM_INVALID)
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10b      	bne.n	800070e <BL_VoidHandleMemWriteCmd+0x66>
						{
							// Send ACK
							BL_VoidSendAck(sizeof(Local_MemCheck));
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff fe48 	bl	800038c <BL_VoidSendAck>

							// Send Satuts
							HAL_UART_Transmit(&huart1, &Local_MemCheck, sizeof(Local_MemCheck), HAL_MAX_DELAY);
 80006fc:	f107 010e 	add.w	r1, r7, #14
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2201      	movs	r2, #1
 8000706:	481d      	ldr	r0, [pc, #116]	@ (800077c <BL_VoidHandleMemWriteCmd+0xd4>)
 8000708:	f001 fb78 	bl	8001dfc <HAL_UART_Transmit>
				        // Send Nack
				        BL_VoidSendNack();
				    }


}
 800070c:	e032      	b.n	8000774 <BL_VoidHandleMemWriteCmd+0xcc>
							if(Local_u8Counter == 0)
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <BL_VoidHandleMemWriteCmd+0xd8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d115      	bne.n	8000742 <BL_VoidHandleMemWriteCmd+0x9a>
									Copy_u32AddrUserApp = *((uint32_t *)(Copy_u8buffer + 2));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800071c:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <BL_VoidHandleMemWriteCmd+0xdc>)
 800071e:	6013      	str	r3, [r2, #0]
									uint8_t Local_u8PageNum = BL_u8CalculatePage(Local_u32ADDR);
 8000720:	6938      	ldr	r0, [r7, #16]
 8000722:	f7ff fd13 	bl	800014c <BL_u8CalculatePage>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]
									BL_FLASHErase(Local_u8PageNum, (127-Local_u8PageNum));
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd94 	bl	8000264 <BL_FLASHErase>
									Local_u8Counter = 1;
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <BL_VoidHandleMemWriteCmd+0xd8>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
							BL_VoidSendAck(sizeof(Local_FlashRet));
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe22 	bl	800038c <BL_VoidSendAck>
							Local_FlashRet = BL_FLASHWrite(Local_u32ADDR , (uint16_t *)&Copy_u8buffer[PAYLOAD] , Copy_u8buffer[PAYLOAD_LEN]);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1dd9      	adds	r1, r3, #7
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3306      	adds	r3, #6
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	6938      	ldr	r0, [r7, #16]
 8000756:	f7ff fddb 	bl	8000310 <BL_FLASHWrite>
 800075a:	4603      	mov	r3, r0
 800075c:	737b      	strb	r3, [r7, #13]
					     	HAL_UART_Transmit(&huart1, &Local_FlashRet , sizeof(Local_FlashRet), HAL_MAX_DELAY);
 800075e:	f107 010d 	add.w	r1, r7, #13
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2201      	movs	r2, #1
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <BL_VoidHandleMemWriteCmd+0xd4>)
 800076a:	f001 fb47 	bl	8001dfc <HAL_UART_Transmit>
}
 800076e:	e001      	b.n	8000774 <BL_VoidHandleMemWriteCmd+0xcc>
				        BL_VoidSendNack();
 8000770:	f7ff fe24 	bl	80003bc <BL_VoidSendNack>
}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000060 	.word	0x20000060
 8000780:	2000005c 	.word	0x2000005c
 8000784:	20000000 	.word	0x20000000

08000788 <BL_VoidHandleEnRWProtectCmd>:




void BL_VoidHandleEnRWProtectCmd(uint8_t *Copy_u8buffer)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <BL_VoidHandleMemReadCmd>:

void BL_VoidHandleMemReadCmd(uint8_t *Copy_u8buffer)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]

}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <BL_VoidHandleReadSectorPStatusCmd>:

void BL_VoidHandleReadSectorPStatusCmd(uint8_t *Copy_u8buffer)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <BL_VoidHandleOTPRreadCmd>:

void BL_VoidHandleOTPRreadCmd(uint8_t *Copy_u8buffer)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <BL_VoidHandleDisRWProtectCmd>:

void BL_VoidHandleDisRWProtectCmd(uint8_t *Copy_u8buffer)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
	...

080007e4 <BL_VoidJumpToUserApp>:

void BL_VoidJumpToUserApp(uint8_t *Copy_u8buffer)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	            // Send Ack
	            BL_VoidSendAck(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff fdcd 	bl	800038c <BL_VoidSendAck>

	            // Send the Bootloader Version
	            uint8_t local_u8BLVersion = BL_VERSION;
 80007f2:	2301      	movs	r3, #1
 80007f4:	72fb      	strb	r3, [r7, #11]
	            HAL_UART_Transmit(&huart1, &local_u8BLVersion, 1, HAL_MAX_DELAY);
 80007f6:	f107 010b 	add.w	r1, r7, #11
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	2201      	movs	r2, #1
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <BL_VoidJumpToUserApp+0x50>)
 8000802:	f001 fafb 	bl	8001dfc <HAL_UART_Transmit>


	            Local_u8Counter = 0;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <BL_VoidJumpToUserApp+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
	        	void (*Local_pResetHandler) (void);

	        	uint32_t ResetHandlerAddress;

	        	// Configure Msp of User App
	        	uint32_t Local_u32MspValue = *((volatile  uint32_t * ) Copy_u32AddrUserApp);
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <BL_VoidJumpToUserApp+0x58>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	617b      	str	r3, [r7, #20]

	        	// Write the user MSP value int MSP register
	        	__asm volatile ("MSR MSP , %0" : :"r"(Local_u32MspValue ));
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	f383 8808 	msr	MSP, r3

	        	// Get the Reset Handler Address
	        	ResetHandlerAddress = *((volatile  uint32_t * ) (Copy_u32AddrUserApp+4));
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <BL_VoidJumpToUserApp+0x58>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3304      	adds	r3, #4
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	613b      	str	r3, [r7, #16]

	        	Local_pResetHandler = (void *) ResetHandlerAddress;
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	60fb      	str	r3, [r7, #12]

	        	// Jump to User App reset Handler
	        	Local_pResetHandler();
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4798      	blx	r3
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000060 	.word	0x20000060
 8000838:	2000005c 	.word	0x2000005c
 800083c:	20000000 	.word	0x20000000

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0c0      	sub	sp, #256	@ 0x100
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 f9af 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f855 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f8b9 	bl	80009c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000852:	f000 f88d 	bl	8000970 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /******** Local Variables *********/
          uint8_t local_u8CmdPacket[255] = {0};
 8000856:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800085a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	22fb      	movs	r2, #251	@ 0xfb
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fd33 	bl	80022d4 <memset>

      	  while (1)
      	  {

  			  // Clear the Buffer
  			  memset(local_u8CmdPacket, 0, sizeof(local_u8CmdPacket));
 800086e:	463b      	mov	r3, r7
 8000870:	22ff      	movs	r2, #255	@ 0xff
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fd2d 	bl	80022d4 <memset>

  			  // 1st Receive the length to follow
  			  HAL_UART_Receive(&huart1, local_u8CmdPacket, sizeof(uint8_t) , HAL_MAX_DELAY);
 800087a:	4639      	mov	r1, r7
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2201      	movs	r2, #1
 8000882:	481b      	ldr	r0, [pc, #108]	@ (80008f0 <main+0xb0>)
 8000884:	f001 fb45 	bl	8001f12 <HAL_UART_Receive>

  			  // 2nd Receive the command and the rest of the packet
  			  HAL_UART_Receive(&huart1, &local_u8CmdPacket[1], local_u8CmdPacket[0], HAL_MAX_DELAY);
 8000888:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800088c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	463b      	mov	r3, r7
 8000896:	1c59      	adds	r1, r3, #1
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <main+0xb0>)
 800089e:	f001 fb38 	bl	8001f12 <HAL_UART_Receive>

  			  if (local_u8CmdPacket[1] >= COMMAND_BL_GET_VER && local_u8CmdPacket[1] <= COMMAND_BL_DIS_R_W_PROTECT)
 80008a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	2b50      	cmp	r3, #80	@ 0x50
 80008ae:	d913      	bls.n	80008d8 <main+0x98>
 80008b0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008b8:	785b      	ldrb	r3, [r3, #1]
 80008ba:	2b5c      	cmp	r3, #92	@ 0x5c
 80008bc:	d80c      	bhi.n	80008d8 <main+0x98>
  			  {

  				  Funtion_Array[local_u8CmdPacket[1] - COMMAND_BL_GET_VER](local_u8CmdPacket);
 80008be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	3b51      	subs	r3, #81	@ 0x51
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <main+0xb4>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	463a      	mov	r2, r7
 80008d2:	4610      	mov	r0, r2
 80008d4:	4798      	blx	r3
 80008d6:	e00a      	b.n	80008ee <main+0xae>
  			  }
  			  else if (local_u8CmdPacket[1] == COMMAND_BL_Jump_To_User_App)
 80008d8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008e0:	785b      	ldrb	r3, [r3, #1]
 80008e2:	2b5d      	cmp	r3, #93	@ 0x5d
 80008e4:	d1c3      	bne.n	800086e <main+0x2e>
  			  {
  				  BL_VoidJumpToUserApp(local_u8CmdPacket);
 80008e6:	463b      	mov	r3, r7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff7b 	bl	80007e4 <BL_VoidJumpToUserApp>
  			  memset(local_u8CmdPacket, 0, sizeof(local_u8CmdPacket));
 80008ee:	e7be      	b.n	800086e <main+0x2e>
 80008f0:	20000060 	.word	0x20000060
 80008f4:	20000004 	.word	0x20000004

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b090      	sub	sp, #64	@ 0x40
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	2228      	movs	r2, #40	@ 0x28
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fce4 	bl	80022d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000922:	2310      	movs	r3, #16
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fe04 	bl	800153c <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800093a:	f000 f859 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f872 	bl	8001a40 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000962:	f000 f845 	bl	80009f0 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3740      	adds	r7, #64	@ 0x40
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_USART1_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_USART1_UART_Init+0x4c>)
 80009a8:	f001 f9d8 	bl	8001d5c <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 f81d 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000060 	.word	0x20000060
 80009c0:	40013800 	.word	0x40013800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_GPIO_Init+0x28>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <MX_GPIO_Init+0x28>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <MX_GPIO_Init+0x28>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40021000 	.word	0x40021000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x5c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_MspInit+0x60>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <HAL_MspInit+0x60>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010000 	.word	0x40010000

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <HAL_UART_MspInit+0x8c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d131      	bne.n	8000ae4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <HAL_UART_MspInit+0x90>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a1a      	ldr	r2, [pc, #104]	@ (8000af0 <HAL_UART_MspInit+0x90>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0x90>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0x90>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <HAL_UART_MspInit+0x90>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_UART_MspInit+0x90>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <HAL_UART_MspInit+0x94>)
 8000ac6:	f000 fbb5 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0x94>)
 8000ae0:	f000 fba8 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010800 	.word	0x40010800

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f874 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b5c:	f7ff fff8 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480b      	ldr	r0, [pc, #44]	@ (8000b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b62:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b64:	4a0c      	ldr	r2, [pc, #48]	@ (8000b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b78:	4c09      	ldr	r4, [pc, #36]	@ (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f001 fbad 	bl	80022e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fe59 	bl	8000840 <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000b98:	08002384 	.word	0x08002384
  ldr r2, =_sbss
 8000b9c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000ba0:	200000d0 	.word	0x200000d0

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f907 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff ff1a 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f911 	bl	8000e1a <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f8e7 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000034 	.word	0x20000034
 8000c2c:	2000003c 	.word	0x2000003c
 8000c30:	20000038 	.word	0x20000038

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	2000003c 	.word	0x2000003c
 8000c54:	200000a8 	.word	0x200000a8

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	@ (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	200000a8 	.word	0x200000a8

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff49 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <HAL_FLASH_Program+0xd8>)
 8000e50:	7e1b      	ldrb	r3, [r3, #24]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d101      	bne.n	8000e5a <HAL_FLASH_Program+0x26>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e054      	b.n	8000f04 <HAL_FLASH_Program+0xd0>
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <HAL_FLASH_Program+0xd8>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e60:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e64:	f000 f8a8 	bl	8000fb8 <FLASH_WaitForLastOperation>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d144      	bne.n	8000efc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d102      	bne.n	8000e7e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	757b      	strb	r3, [r7, #21]
 8000e7c:	e007      	b.n	8000e8e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d102      	bne.n	8000e8a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e84:	2302      	movs	r3, #2
 8000e86:	757b      	strb	r3, [r7, #21]
 8000e88:	e001      	b.n	8000e8e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	e02d      	b.n	8000ef0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e94:	7dbb      	ldrb	r3, [r7, #22]
 8000e96:	005a      	lsls	r2, r3, #1
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	eb02 0c03 	add.w	ip, r2, r3
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	0119      	lsls	r1, r3, #4
 8000ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ea6:	f1c1 0620 	rsb	r6, r1, #32
 8000eaa:	f1a1 0020 	sub.w	r0, r1, #32
 8000eae:	fa22 f401 	lsr.w	r4, r2, r1
 8000eb2:	fa03 f606 	lsl.w	r6, r3, r6
 8000eb6:	4334      	orrs	r4, r6
 8000eb8:	fa23 f000 	lsr.w	r0, r3, r0
 8000ebc:	4304      	orrs	r4, r0
 8000ebe:	fa23 f501 	lsr.w	r5, r3, r1
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4660      	mov	r0, ip
 8000ec8:	f000 f85a 	bl	8000f80 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ecc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ed0:	f000 f872 	bl	8000fb8 <FLASH_WaitForLastOperation>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_FLASH_Program+0xdc>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <HAL_FLASH_Program+0xdc>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d107      	bne.n	8000efa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	3301      	adds	r3, #1
 8000eee:	75bb      	strb	r3, [r7, #22]
 8000ef0:	7dba      	ldrb	r2, [r7, #22]
 8000ef2:	7d7b      	ldrb	r3, [r7, #21]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3cd      	bcc.n	8000e94 <HAL_FLASH_Program+0x60>
 8000ef8:	e000      	b.n	8000efc <HAL_FLASH_Program+0xc8>
      {
        break;
 8000efa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_FLASH_Program+0xd8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	761a      	strb	r2, [r3, #24]

  return status;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0c:	200000b0 	.word	0x200000b0
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_FLASH_Unlock+0x40>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00d      	beq.n	8000f46 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_FLASH_Unlock+0x40>)
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_FLASH_Unlock+0x44>)
 8000f2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_FLASH_Unlock+0x40>)
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_FLASH_Unlock+0x48>)
 8000f34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <HAL_FLASH_Unlock+0x40>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000
 8000f58:	45670123 	.word	0x45670123
 8000f5c:	cdef89ab 	.word	0xcdef89ab

08000f60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_FLASH_Lock+0x1c>)
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_FLASH_Lock+0x1c>)
 8000f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000

08000f80 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <FLASH_Program_HalfWord+0x30>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <FLASH_Program_HalfWord+0x34>)
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <FLASH_Program_HalfWord+0x34>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	887a      	ldrh	r2, [r7, #2]
 8000fa2:	801a      	strh	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200000b0 	.word	0x200000b0
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fe4a 	bl	8000c58 <HAL_GetTick>
 8000fc4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fc6:	e010      	b.n	8000fea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fce:	d00c      	beq.n	8000fea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <FLASH_WaitForLastOperation+0x2e>
 8000fd6:	f7ff fe3f 	bl	8000c58 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d201      	bcs.n	8000fea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e025      	b.n	8001036 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <FLASH_WaitForLastOperation+0x88>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1e8      	bne.n	8000fc8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <FLASH_WaitForLastOperation+0x88>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <FLASH_WaitForLastOperation+0x88>)
 8001004:	2220      	movs	r2, #32
 8001006:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <FLASH_WaitForLastOperation+0x88>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10b      	bne.n	800102c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <FLASH_WaitForLastOperation+0x88>)
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <FLASH_WaitForLastOperation+0x88>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800102c:	f000 f80a 	bl	8001044 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000

08001044 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800104e:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <FLASH_SetErrorCode+0x9c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <FLASH_SetErrorCode+0x9c>)
 8001064:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <FLASH_SetErrorCode+0x9c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <FLASH_SetErrorCode+0x9c>)
 8001084:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <FLASH_SetErrorCode+0x9c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <FLASH_SetErrorCode+0x9c>)
 80010a4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f240 1201 	movw	r2, #257	@ 0x101
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d106      	bne.n	80010ca <FLASH_SetErrorCode+0x86>
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	61d3      	str	r3, [r2, #28]
}  
 80010c8:	e002      	b.n	80010d0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <FLASH_SetErrorCode+0x98>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	60d3      	str	r3, [r2, #12]
}  
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000
 80010e0:	200000b0 	.word	0x200000b0

080010e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010f6:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <HAL_FLASHEx_Erase+0xd0>)
 80010f8:	7e1b      	ldrb	r3, [r3, #24]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_FLASHEx_Erase+0x1e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e053      	b.n	80011aa <HAL_FLASHEx_Erase+0xc6>
 8001102:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <HAL_FLASHEx_Erase+0xd0>)
 8001104:	2201      	movs	r2, #1
 8001106:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d116      	bne.n	800113e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001110:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001114:	f7ff ff50 	bl	8000fb8 <FLASH_WaitForLastOperation>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d141      	bne.n	80011a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 f84c 	bl	80011bc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001124:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001128:	f7ff ff46 	bl	8000fb8 <FLASH_WaitForLastOperation>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_FLASHEx_Erase+0xd4>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a20      	ldr	r2, [pc, #128]	@ (80011b8 <HAL_FLASHEx_Erase+0xd4>)
 8001136:	f023 0304 	bic.w	r3, r3, #4
 800113a:	6113      	str	r3, [r2, #16]
 800113c:	e031      	b.n	80011a2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800113e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001142:	f7ff ff39 	bl	8000fb8 <FLASH_WaitForLastOperation>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d12a      	bne.n	80011a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f04f 32ff 	mov.w	r2, #4294967295
 8001152:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	e019      	b.n	8001190 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f000 f849 	bl	80011f4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001162:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001166:	f7ff ff27 	bl	8000fb8 <FLASH_WaitForLastOperation>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_FLASHEx_Erase+0xd4>)
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <HAL_FLASHEx_Erase+0xd4>)
 8001174:	f023 0302 	bic.w	r3, r3, #2
 8001178:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	601a      	str	r2, [r3, #0]
            break;
 8001186:	e00c      	b.n	80011a2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800118e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	029a      	lsls	r2, r3, #10
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4413      	add	r3, r2
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3dc      	bcc.n	800115c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <HAL_FLASHEx_Erase+0xd0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	761a      	strb	r2, [r3, #24]

  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000b0 	.word	0x200000b0
 80011b8:	40022000 	.word	0x40022000

080011bc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <FLASH_MassErase+0x30>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <FLASH_MassErase+0x34>)
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <FLASH_MassErase+0x34>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <FLASH_MassErase+0x34>)
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <FLASH_MassErase+0x34>)
 80011dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011e0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200000b0 	.word	0x200000b0
 80011f0:	40022000 	.word	0x40022000

080011f4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <FLASH_PageErase+0x38>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <FLASH_PageErase+0x3c>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <FLASH_PageErase+0x3c>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <FLASH_PageErase+0x3c>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <FLASH_PageErase+0x3c>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <FLASH_PageErase+0x3c>)
 800121a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200000b0 	.word	0x200000b0
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	@ 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e169      	b.n	800151c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001248:	2201      	movs	r2, #1
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8158 	bne.w	8001516 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a9a      	ldr	r2, [pc, #616]	@ (80014d4 <HAL_GPIO_Init+0x2a0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d05e      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001270:	4a98      	ldr	r2, [pc, #608]	@ (80014d4 <HAL_GPIO_Init+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d875      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001276:	4a98      	ldr	r2, [pc, #608]	@ (80014d8 <HAL_GPIO_Init+0x2a4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d058      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 800127c:	4a96      	ldr	r2, [pc, #600]	@ (80014d8 <HAL_GPIO_Init+0x2a4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d86f      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001282:	4a96      	ldr	r2, [pc, #600]	@ (80014dc <HAL_GPIO_Init+0x2a8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d052      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001288:	4a94      	ldr	r2, [pc, #592]	@ (80014dc <HAL_GPIO_Init+0x2a8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d869      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800128e:	4a94      	ldr	r2, [pc, #592]	@ (80014e0 <HAL_GPIO_Init+0x2ac>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d04c      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001294:	4a92      	ldr	r2, [pc, #584]	@ (80014e0 <HAL_GPIO_Init+0x2ac>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d863      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800129a:	4a92      	ldr	r2, [pc, #584]	@ (80014e4 <HAL_GPIO_Init+0x2b0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d046      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 80012a0:	4a90      	ldr	r2, [pc, #576]	@ (80014e4 <HAL_GPIO_Init+0x2b0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d85d      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d82a      	bhi.n	8001300 <HAL_GPIO_Init+0xcc>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d859      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012ae:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <HAL_GPIO_Init+0x80>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	08001309 	.word	0x08001309
 80012bc:	0800131b 	.word	0x0800131b
 80012c0:	0800135d 	.word	0x0800135d
 80012c4:	08001363 	.word	0x08001363
 80012c8:	08001363 	.word	0x08001363
 80012cc:	08001363 	.word	0x08001363
 80012d0:	08001363 	.word	0x08001363
 80012d4:	08001363 	.word	0x08001363
 80012d8:	08001363 	.word	0x08001363
 80012dc:	08001363 	.word	0x08001363
 80012e0:	08001363 	.word	0x08001363
 80012e4:	08001363 	.word	0x08001363
 80012e8:	08001363 	.word	0x08001363
 80012ec:	08001363 	.word	0x08001363
 80012f0:	08001363 	.word	0x08001363
 80012f4:	08001363 	.word	0x08001363
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001325 	.word	0x08001325
 8001300:	4a79      	ldr	r2, [pc, #484]	@ (80014e8 <HAL_GPIO_Init+0x2b4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001306:	e02c      	b.n	8001362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e029      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	3304      	adds	r3, #4
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e024      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	3308      	adds	r3, #8
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e01f      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	330c      	adds	r3, #12
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e01a      	b.n	8001364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001336:	2304      	movs	r3, #4
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e013      	b.n	8001364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	611a      	str	r2, [r3, #16]
          break;
 800134e:	e009      	b.n	8001364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	615a      	str	r2, [r3, #20]
          break;
 800135a:	e003      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x130>
          break;
 8001362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2bff      	cmp	r3, #255	@ 0xff
 8001368:	d801      	bhi.n	800136e <HAL_GPIO_Init+0x13a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_Init+0x13e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d802      	bhi.n	8001380 <HAL_GPIO_Init+0x14c>
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x152>
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	3b08      	subs	r3, #8
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	210f      	movs	r1, #15
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80b1 	beq.w	8001516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b4:	4b4d      	ldr	r3, [pc, #308]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a4c      	ldr	r2, [pc, #304]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b4a      	ldr	r3, [pc, #296]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013cc:	4a48      	ldr	r2, [pc, #288]	@ (80014f0 <HAL_GPIO_Init+0x2bc>)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a40      	ldr	r2, [pc, #256]	@ (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d013      	beq.n	8001420 <HAL_GPIO_Init+0x1ec>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3f      	ldr	r2, [pc, #252]	@ (80014f8 <HAL_GPIO_Init+0x2c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00d      	beq.n	800141c <HAL_GPIO_Init+0x1e8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3e      	ldr	r2, [pc, #248]	@ (80014fc <HAL_GPIO_Init+0x2c8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3d      	ldr	r2, [pc, #244]	@ (8001500 <HAL_GPIO_Init+0x2cc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_GPIO_Init+0x1e0>
 8001410:	2303      	movs	r3, #3
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001414:	2304      	movs	r3, #4
 8001416:	e004      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001418:	2302      	movs	r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001420:	2300      	movs	r3, #0
 8001422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001432:	492f      	ldr	r1, [pc, #188]	@ (80014f0 <HAL_GPIO_Init+0x2bc>)
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800144c:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	492c      	ldr	r1, [pc, #176]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145a:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4928      	ldr	r1, [pc, #160]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4922      	ldr	r1, [pc, #136]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	491e      	ldr	r1, [pc, #120]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800148c:	4013      	ands	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4918      	ldr	r1, [pc, #96]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4914      	ldr	r1, [pc, #80]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d021      	beq.n	8001508 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	490e      	ldr	r1, [pc, #56]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e021      	b.n	8001516 <HAL_GPIO_Init+0x2e2>
 80014d2:	bf00      	nop
 80014d4:	10320000 	.word	0x10320000
 80014d8:	10310000 	.word	0x10310000
 80014dc:	10220000 	.word	0x10220000
 80014e0:	10210000 	.word	0x10210000
 80014e4:	10120000 	.word	0x10120000
 80014e8:	10110000 	.word	0x10110000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000
 8001500:	40011400 	.word	0x40011400
 8001504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_GPIO_Init+0x304>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	43db      	mvns	r3, r3
 8001510:	4909      	ldr	r1, [pc, #36]	@ (8001538 <HAL_GPIO_Init+0x304>)
 8001512:	4013      	ands	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae8e 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	372c      	adds	r7, #44	@ 0x2c
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e272      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800155c:	4b92      	ldr	r3, [pc, #584]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	d00c      	beq.n	8001582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001568:	4b8f      	ldr	r3, [pc, #572]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d112      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
 8001574:	4b8c      	ldr	r3, [pc, #560]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d10b      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	4b89      	ldr	r3, [pc, #548]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d06c      	beq.n	8001668 <HAL_RCC_OscConfig+0x12c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d168      	bne.n	8001668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e24c      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x76>
 80015a4:	4b80      	ldr	r3, [pc, #512]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a7f      	ldr	r2, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e02e      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b7b      	ldr	r3, [pc, #492]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7a      	ldr	r2, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b78      	ldr	r3, [pc, #480]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a77      	ldr	r2, [pc, #476]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0xbc>
 80015de:	4b72      	ldr	r3, [pc, #456]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a71      	ldr	r2, [pc, #452]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b6f      	ldr	r3, [pc, #444]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015f8:	4b6b      	ldr	r3, [pc, #428]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6a      	ldr	r2, [pc, #424]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a67      	ldr	r2, [pc, #412]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb1e 	bl	8000c58 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fb1a 	bl	8000c58 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e200      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b5d      	ldr	r3, [pc, #372]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0xe4>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb0a 	bl	8000c58 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fb06 	bl	8000c58 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1ec      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x10c>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001676:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001682:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1c0      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4939      	ldr	r1, [pc, #228]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	e03a      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <HAL_RCC_OscConfig+0x270>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fabf 	bl	8000c58 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fabb 	bl	8000c58 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1a1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4927      	ldr	r1, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <HAL_RCC_OscConfig+0x270>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fa9e 	bl	8000c58 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fa9a 	bl	8000c58 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e180      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fa7e 	bl	8000c58 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fa7a 	bl	8000c58 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e160      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f000 face 	bl	8001d20 <RCC_Delay>
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fa64 	bl	8000c58 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fa60 	bl	8000c58 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d908      	bls.n	80017b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e146      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	42420000 	.word	0x42420000
 80017b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b92      	ldr	r3, [pc, #584]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e9      	bne.n	8001794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a6 	beq.w	800191a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b88      	ldr	r3, [pc, #544]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a87      	ldr	r2, [pc, #540]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b85      	ldr	r3, [pc, #532]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b82      	ldr	r3, [pc, #520]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b7f      	ldr	r3, [pc, #508]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fa21 	bl	8000c58 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fa1d 	bl	8000c58 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	@ 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e103      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x312>
 8001840:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6e      	ldr	r2, [pc, #440]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e02d      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001856:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a69      	ldr	r2, [pc, #420]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b67      	ldr	r3, [pc, #412]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x356>
 8001878:	4b61      	ldr	r3, [pc, #388]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a60      	ldr	r2, [pc, #384]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a5d      	ldr	r2, [pc, #372]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001892:	4b5b      	ldr	r3, [pc, #364]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a5a      	ldr	r2, [pc, #360]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	4b58      	ldr	r3, [pc, #352]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a57      	ldr	r2, [pc, #348]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff f9d1 	bl	8000c58 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff f9cd 	bl	8000c58 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0b1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x37e>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff f9bb 	bl	8000c58 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff f9b7 	bl	8000c58 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e09b      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a3b      	ldr	r2, [pc, #236]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d061      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d146      	bne.n	80019c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f98b 	bl	8000c58 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff f987 	bl	8000c58 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e06d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196c:	d108      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196e:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4921      	ldr	r1, [pc, #132]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a19      	ldr	r1, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	430b      	orrs	r3, r1
 8001992:	491b      	ldr	r1, [pc, #108]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f95b 	bl	8000c58 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f957 	bl	8000c58 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46a>
 80019c4:	e035      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f944 	bl	8000c58 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f940 	bl	8000c58 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e026      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x498>
 80019f2:	e01e      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e019      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_RCC_OscConfig+0x500>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b6a      	ldr	r3, [pc, #424]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b67      	ldr	r3, [pc, #412]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4965      	ldr	r1, [pc, #404]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d040      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e073      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4936      	ldr	r1, [pc, #216]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f892 	bl	8000c58 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f88e 	bl	8000c58 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e053      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4922      	ldr	r1, [pc, #136]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x1cc>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fff0 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08002350 	.word	0x08002350
 8001c0c:	20000034 	.word	0x20000034
 8001c10:	20000038 	.word	0x20000038

08001c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x36>
 8001c42:	e027      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c46:	613b      	str	r3, [r7, #16]
      break;
 8001c48:	e027      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a17      	ldr	r2, [pc, #92]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0c5b      	lsrs	r3, r3, #17
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	fb03 f202 	mul.w	r2, r3, r2
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	613b      	str	r3, [r7, #16]
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	693b      	ldr	r3, [r7, #16]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	08002368 	.word	0x08002368
 8001cb4:	08002378 	.word	0x08002378
 8001cb8:	003d0900 	.word	0x003d0900

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000034 	.word	0x20000034

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff2 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002360 	.word	0x08002360

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	0adb      	lsrs	r3, r3, #11
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08002360 	.word	0x08002360

08001d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <RCC_Delay+0x34>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <RCC_Delay+0x38>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0a5b      	lsrs	r3, r3, #9
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d3c:	bf00      	nop
  }
  while (Delay --);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	60fa      	str	r2, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <RCC_Delay+0x1c>
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000034 	.word	0x20000034
 8001d58:	10624dd3 	.word	0x10624dd3

08001d5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e042      	b.n	8001df4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fe6c 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2224      	movs	r2, #36	@ 0x24
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fa09 	bl	80021b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001db4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001dc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d175      	bne.n	8001f08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_UART_Transmit+0x2c>
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e06e      	b.n	8001f0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2221      	movs	r2, #33	@ 0x21
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e3a:	f7fe ff0d 	bl	8000c58 <HAL_GetTick>
 8001e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e54:	d108      	bne.n	8001e68 <HAL_UART_Transmit+0x6c>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	e003      	b.n	8001e70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e70:	e02e      	b.n	8001ed0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f8df 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e03a      	b.n	8001f0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10b      	bne.n	8001eb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	3302      	adds	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	e007      	b.n	8001ec2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1cb      	bne.n	8001e72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2140      	movs	r1, #64	@ 0x40
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f8ab 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b08a      	sub	sp, #40	@ 0x28
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	f040 8081 	bne.w	8002036 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_UART_Receive+0x2e>
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e079      	b.n	8002038 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2222      	movs	r2, #34	@ 0x22
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f58:	f7fe fe7e 	bl	8000c58 <HAL_GetTick>
 8001f5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f72:	d108      	bne.n	8001f86 <HAL_UART_Receive+0x74>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e003      	b.n	8001f8e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f8e:	e047      	b.n	8002020 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	2120      	movs	r1, #32
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f850 	bl	8002040 <UART_WaitOnFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e042      	b.n	8002038 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e01f      	b.n	8002012 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fda:	d007      	beq.n	8001fec <HAL_UART_Receive+0xda>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <HAL_UART_Receive+0xe8>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e008      	b.n	800200c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002006:	b2da      	uxtb	r2, r3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1b2      	bne.n	8001f90 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002050:	e03b      	b.n	80020ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d037      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7fe fdfd 	bl	8000c58 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <UART_WaitOnFlagUntilTimeout+0x30>
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e03a      	b.n	80020ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d023      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b80      	cmp	r3, #128	@ 0x80
 8002086:	d020      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b40      	cmp	r3, #64	@ 0x40
 800208c:	d01d      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b08      	cmp	r3, #8
 800209a:	d116      	bne.n	80020ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f81d 	bl	80020f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2208      	movs	r2, #8
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4013      	ands	r3, r2
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d0b4      	beq.n	8002052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b095      	sub	sp, #84	@ 0x54
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	330c      	adds	r3, #12
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002104:	e853 3f00 	ldrex	r3, [r3]
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800210a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	330c      	adds	r3, #12
 8002118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800211a:	643a      	str	r2, [r7, #64]	@ 0x40
 800211c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002122:	e841 2300 	strex	r3, r2, [r1]
 8002126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e5      	bne.n	80020fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3314      	adds	r3, #20
 8002134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	e853 3f00 	ldrex	r3, [r3]
 800213c:	61fb      	str	r3, [r7, #28]
   return(result);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3314      	adds	r3, #20
 800214c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800214e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002156:	e841 2300 	strex	r3, r2, [r1]
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1e5      	bne.n	800212e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	2b01      	cmp	r3, #1
 8002168:	d119      	bne.n	800219e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	330c      	adds	r3, #12
 8002170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	60bb      	str	r3, [r7, #8]
   return(result);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f023 0310 	bic.w	r3, r3, #16
 8002180:	647b      	str	r3, [r7, #68]	@ 0x44
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	330c      	adds	r3, #12
 8002188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800218a:	61ba      	str	r2, [r7, #24]
 800218c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	e841 2300 	strex	r3, r2, [r1]
 8002196:	613b      	str	r3, [r7, #16]
   return(result);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e5      	bne.n	800216a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021ac:	bf00      	nop
 80021ae:	3754      	adds	r7, #84	@ 0x54
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80021f2:	f023 030c 	bic.w	r3, r3, #12
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2c      	ldr	r2, [pc, #176]	@ (80022cc <UART_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002220:	f7ff fd6a 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	e002      	b.n	800222e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002228:	f7ff fd52 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 800222c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009a      	lsls	r2, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	4a22      	ldr	r2, [pc, #136]	@ (80022d0 <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	0119      	lsls	r1, r3, #4
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	009a      	lsls	r2, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fbb2 f2f3 	udiv	r2, r2, r3
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <UART_SetConfig+0x118>)
 8002266:	fba3 0302 	umull	r0, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2064      	movs	r0, #100	@ 0x64
 800226e:	fb00 f303 	mul.w	r3, r0, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	3332      	adds	r3, #50	@ 0x32
 8002278:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <UART_SetConfig+0x118>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002284:	4419      	add	r1, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f2f3 	udiv	r2, r2, r3
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <UART_SetConfig+0x118>)
 800229e:	fba3 0302 	umull	r0, r3, r3, r2
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2064      	movs	r0, #100	@ 0x64
 80022a6:	fb00 f303 	mul.w	r3, r0, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	@ 0x32
 80022b0:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <UART_SetConfig+0x118>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	440a      	add	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013800 	.word	0x40013800
 80022d0:	51eb851f 	.word	0x51eb851f

080022d4 <memset>:
 80022d4:	4603      	mov	r3, r0
 80022d6:	4402      	add	r2, r0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d100      	bne.n	80022de <memset+0xa>
 80022dc:	4770      	bx	lr
 80022de:	f803 1b01 	strb.w	r1, [r3], #1
 80022e2:	e7f9      	b.n	80022d8 <memset+0x4>

080022e4 <__libc_init_array>:
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	2600      	movs	r6, #0
 80022e8:	4d0c      	ldr	r5, [pc, #48]	@ (800231c <__libc_init_array+0x38>)
 80022ea:	4c0d      	ldr	r4, [pc, #52]	@ (8002320 <__libc_init_array+0x3c>)
 80022ec:	1b64      	subs	r4, r4, r5
 80022ee:	10a4      	asrs	r4, r4, #2
 80022f0:	42a6      	cmp	r6, r4
 80022f2:	d109      	bne.n	8002308 <__libc_init_array+0x24>
 80022f4:	f000 f81a 	bl	800232c <_init>
 80022f8:	2600      	movs	r6, #0
 80022fa:	4d0a      	ldr	r5, [pc, #40]	@ (8002324 <__libc_init_array+0x40>)
 80022fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002328 <__libc_init_array+0x44>)
 80022fe:	1b64      	subs	r4, r4, r5
 8002300:	10a4      	asrs	r4, r4, #2
 8002302:	42a6      	cmp	r6, r4
 8002304:	d105      	bne.n	8002312 <__libc_init_array+0x2e>
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	f855 3b04 	ldr.w	r3, [r5], #4
 800230c:	4798      	blx	r3
 800230e:	3601      	adds	r6, #1
 8002310:	e7ee      	b.n	80022f0 <__libc_init_array+0xc>
 8002312:	f855 3b04 	ldr.w	r3, [r5], #4
 8002316:	4798      	blx	r3
 8002318:	3601      	adds	r6, #1
 800231a:	e7f2      	b.n	8002302 <__libc_init_array+0x1e>
 800231c:	0800237c 	.word	0x0800237c
 8002320:	0800237c 	.word	0x0800237c
 8002324:	0800237c 	.word	0x0800237c
 8002328:	08002380 	.word	0x08002380

0800232c <_init>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr

08002338 <_fini>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr
